<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body{
            text-align: center;
        }
        .ejs{
            font-size: 80px;
            font-weight: bold;
            color: rgb(221, 147, 9);
        }
    </style>
</head>
<body>
    <h1 class = "ejs"> HELLO </h1>
    <div class = "ejs"> <%=name %> </div>

    <!--  %안에서는 document(웹 브라우저 API) 접근이 불가(Node 영역)  -->
    <!-- 
        변수 정의 
        ejs 에서는 <% %> 안에 자바스크립트를 쓸 수 있고
        jsp 에서는 자바를 쓸 수 있게 된다
    -->

    <% const test = "test" %>
    <p class="ejs"> <%= test %> </p>
    
    <% const hello = [1, 2, 3, 4, 5] %>
    <% for (let i=0; i< hello.length; i++){ %>
        <a class = "ejs">
            <%= hello[i] %>
        </a>
    <%}%>

    <% for (let i=0; i< holder.length; i++){ %>
        <a class = "ejs">
            <%= holder[i].title %>
        </a>
    <%}%>

</body>
</html>

<!-- 

    [ SSR(Server Side Rendering) ]
    장점
    1)  SEO(검색어 순위)에 굉장히 강하다.
    2)  구글 검색엔진은 상관 X
        네이버나 타 검색엔진은 상관 O
    
    단점
    1)  서버에서 데이터를 그려서 보내줘야하기 때문에 서버 부담이 큼
    2)  협업하기 불편 (가독성 저하 및 코드 동작 순서 파악이 어려움)
    3)  데이터 갱신시 서버에서 데이터를 새로 그려야해서 페이지 깜빡거림

    [ CSR(Client Side Rendering) ]
    장점
    1)  페이지 깜빡임이 없음 - 실제 어플리케이션처럼 동작
    2)  SEO(로딩창이 있는 이유)
        데이터를 요청 -> 그 사이에 로딩을 띄웠다가 요청이 끝나면
        종료하는데, 웹 크롤러가 그 비어있는 순간을 크롤링해서 
        SEO에 취약하다

 -->